{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Spotify Electron Documentation","text":"<p>Spotify Electron is a cross-platform music streaming desktop app made with Electron-React frontend and Python-FastAPI-MongoDB. The main goal is to reproduce the original Spotify functionality while adding new one like uploading songs.</p> <p>This guide is designed to provide developers with all the necessary information to install, configure, use and extend the Spotify Electron application.</p> <p></p>"},{"location":"Architecture/","title":"Architecture","text":"<p>The app has two different architectures. These architectures only differ on song store, managment, serving and playing.</p> <ul> <li><code>BLOB</code> architecture is recommended for both production and development and only requires a MongoDB database instance.</li> </ul> <ul> <li><code>SERVERLESS</code> architecture is also provided, it requires a serverless function to manage song resources and streaming. This architecture uses AWS Lambda as serverless function, S3 Bucket for storing songs and Cloudfront for streaming songs into the client using a URL.</li> </ul>"},{"location":"Architecture/#blob","title":"BLOB","text":"<p>Songs are stored using a MongoDB database using the BLOB data type and streamed directly by backend. Songs storage is based on GridFS specification. Two collections are used:</p> <ul> <li>data.files, which stores song metadata, like the first data chunk of content and other data that makes easier to handle songs without needing to get the full song data.</li> <li>data.chunks, a linked list of BLOB data that stores the song content.</li> </ul> <p>Frontend has to set the following configuration in <code>global.ts</code> file:</p> <pre><code>export const songArchitecture: SongArchitecture = SongArchitecture.BLOB_ARCHITECTURE;\n</code></pre> <p>Backend has to use the following configuration in <code>.env</code>:</p> <pre><code>ARCH=BLOB\n</code></pre> <p>With this configuration, frontend will load the <code>BLOB</code> architecture music player that manages the incoming encoded base64 bytes of the song data and injects it into the music player.</p> <p></p>"},{"location":"Architecture/#song-architecture","title":"Song architecture","text":""},{"location":"Architecture/#serverless-deprecated","title":"SERVERLESS (deprecated)","text":"<p>As seen in the architecture diagram below, the song data is manage using and AWS Lambda serverless function, it stores the data into an S3 Bucket. The stored data is linked with Cloudfront streaming service which provides a URL that is injected into the music player for streaming the song data. Song metadata such as name, artist, streams, etc is stored in the MongoDB database instance.</p> <p>Frontend has to set the following config in <code>global.ts</code> file:</p> <pre><code>export const songArchitecture: SongArchitecture = SongArchitecture.SERVERLESS_ARCHITECTURE;\n</code></pre> <p>Backend has to use the following config in <code>.env</code>:</p> <pre><code>ARCH=SERVERLESS\n</code></pre>"},{"location":"Architecture/#app-architecture","title":"App architecture","text":""},{"location":"Architecture/#song-architecture_1","title":"Song architecture","text":""},{"location":"Auth-Login/","title":"Authentication and Login","text":""},{"location":"Auth-Login/#wip","title":"WIP","text":"<p>JWT Bearer schema and how it works</p>"},{"location":"Auth-Login/#backend","title":"Backend","text":"<ul> <li>swagger request</li> </ul>"},{"location":"Auth-Login/#frontend","title":"Frontend","text":"<ul> <li>include credentials</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at . All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"How to contribute","text":"<p>In this document we will cover how contribute to the project and the rules associated to the process. We gladly accept all kinds of contributions, from writing new features and fixing bugs to improve the existing documentation. When contributing to the project the code of conduct must be followed.</p> <p>We welcome any help you can offer and are eagerly waiting for your contributions. Feel free to ask for assistance or guidance at any time. We encourage you to get involved because contributing to open source projects allows you to collaborate with other members, improve your coding skills, and enhance your communication abilities.</p>"},{"location":"CONTRIBUTING/#steps-to-contribute","title":"\ud83d\udd90\ufe0f Steps to Contribute","text":"<ol> <li>Select an issue and ask to work on it by leaving a comment in the same link (Not Trello).</li> <li>Create a new branch with the feature you're implementing using the branch naming convention.</li> <li>Push your changes to the new branch using the commit naming convention.</li> <li>Add tests for every functionality changed or added.</li> <li>Go to your branch in Github, then select Pull Request and fill the fields indicated in the template. Remember to rename the Pull Request using our convention.</li> </ol> <p>It's important to leave a comment about working on an issue so the maintainer can add you as an assignee and avoid two people working on the same issue.</p> <p>Trello links are used to synchronize Github issues with board tasks, we're not accepting new members due to free tier limitation until you have contributed at least twice.</p>"},{"location":"CONTRIBUTING/#contributors-list","title":"\ud83d\ude4d\u200d\u2642\ufe0f Contributors list","text":"<p>Once you contribute to the project, your name and GitHub profile will be added into the CONTRIBUTORS list as an acknowledgement for your work and in order to thank you.</p>"},{"location":"CONTRIBUTING/#required-software","title":"\ud83d\udce6 Required Software","text":"<ul> <li>Node &gt;= 20.12.2</li> <li>Python &gt;= 3.11</li> <li>Git</li> <li>Docker &amp; Docker Compose</li> </ul>"},{"location":"CONTRIBUTING/#set-up-development-environment","title":"\u2699 Set up development environment","text":"<ul> <li>Backend</li> <li>Frontend</li> </ul>"},{"location":"CONTRIBUTORS/","title":"\ud83e\udd35\ud83c\udffc Contributors of Spotify Electron","text":"<p>I would like to express my heartfelt gratitude to the following individuals for their invaluable contributions to Spotify Electron. Your efforts are immensely appreciated and hold significant importance for me and the project.</p> <p>Me gustar\u00eda expresar mi m\u00e1s sincero agradecimiento a las siguientes personas por sus invaluables contribuciones a Spotify Electron. Sus esfuerzos son inmensamente apreciados y tienen una gran importancia para m\u00ed y para el proyecto.</p>"},{"location":"CONTRIBUTORS/#code-contributors","title":"Code Contributors","text":"<ul> <li>Ferbo12</li> <li>Ercamarero</li> <li>KarlosM2</li> <li>mariete1223</li> <li>Javiks-P</li> <li>raulZC </li> <li>TalhaBinNasir</li> <li>xiomaraR</li> <li>aarshgupta24</li> </ul>"},{"location":"CONTRIBUTORS/#bug-reporters","title":"Bug Reporters","text":""},{"location":"CONTRIBUTORS/#feature-requesters","title":"Feature Requesters","text":""},{"location":"CONTRIBUTORS/#translators","title":"Translators","text":"<ul> <li>ariceron5</li> </ul>"},{"location":"CONTRIBUTORS/#documentation-contributors","title":"Documentation Contributors","text":"<ul> <li>ariceron5</li> </ul>"},{"location":"CONTRIBUTORS/#other-contributions","title":"Other Contributions","text":"<ul> <li>ariceron5</li> </ul> <p>If you have contributed to this project and your name is not listed here, please accept our apologies and let us know so we can add you!</p>"},{"location":"CONTRIBUTORS/#i-would-like-to-join-this-list-how-can-i-help-the-project","title":"I would like to join this list. How can I help the project?","text":"<p>We're currently looking for contributions for the following:</p> <ul> <li>Solve issues<ul> <li>Implementing new features</li> <li>Fixing bugs</li> <li>Improve the project</li> </ul> </li> <li>Docs Writing</li> </ul> <p>For more information, please refer to our CONTRIBUTING guide.</p>"},{"location":"Git-Convention/","title":"Git Convention","text":"<p>In this document we will cover the convention applied to git usage in the project.</p>"},{"location":"Git-Convention/#branches","title":"Branches","text":"<ul> <li>The main branch of the project is <code>master</code>. All pull requests will be created towards <code>master</code> branch.</li> <li><code>gh-pages</code> branch will host the documentation for the project and will only update using CI. This CI will be triggered when a pull request is merged into <code>master</code>.</li> </ul>"},{"location":"Git-Convention/#branch-convention","title":"Branch convention","text":"<p>We will use the next convention for branch names:</p> <p><code>prefix/IssueNumber-IssueTitle</code></p> <ul> <li>Prefix: select one of the prefixes listed below.</li> <li>IssueNumber: the issue number associated with the branch.</li> <li>IssueTitle: the title of the issue.</li> </ul> <p>Examples:</p> <pre><code>Issue:\n\nissue-title: Add Home Page\nissue-number: #7777\n</code></pre> <ul> <li>feat/7777-Add-Home-Page</li> </ul>"},{"location":"Git-Convention/#commit-convention","title":"Commit convention","text":"<p>In order to commit into the repository the next convention has to be applied:</p> <p><code>prefix: changeMade</code></p> <ul> <li>Prefix: select one of the prefixes listed in <code>Naming convention prefixes</code> section at the end of this document.</li> <li>ChangeMade: the change that has been implemented. In present tense.</li> </ul> <p>Examples:</p> <ul> <li>feat: add Home Page</li> <li>fix: remove failing user login authentication</li> </ul> <p>pre-commit will insert the issue number if the branch name follows the convention</p>"},{"location":"Git-Convention/#pull-request-convention","title":"Pull Request convention","text":"<p>After creating your Pull Request rename the title with the issue title and its number:</p> <p><code>#issue-number: IssueTitle</code></p> <p>Examples:</p> <pre><code>Issue:\n\nissue-title: Add Home Page\nissue-number: #7777\n</code></pre> <ul> <li>#7777: Add Home Page</li> </ul>"},{"location":"Git-Convention/#naming-convention-prefixes","title":"Naming convention prefixes","text":"<ul> <li><code>feat</code>: indicates the addition of a new feature or functionality to the project.</li> <li><code>fix</code>: used when fixing a bug or error in the code.</li> <li><code>docs</code>: changes to the documentation.</li> <li><code>style</code>: formatting, missing semi colons, etc; no production code change.</li> <li><code>refactor</code>: refactoring production code, eg. renaming a variable.</li> <li><code>test</code>: adding missing tests, refactoring tests; no production code change.</li> <li><code>chore</code>: updating grunt tasks etc; no production code change.</li> <li><code>ci</code>: updating scripts for continuous integration.</li> <li><code>build</code>: update building scripts or Docker Images.</li> <li><code>perf</code>: update code for performance improvement.</li> <li><code>revert</code>: revert changes.</li> </ul>"},{"location":"SETUP/","title":"Global Set up","text":"<p>In this section we will cover how to set up common tools for the whole project.</p>"},{"location":"SETUP/#set-up-common-project-tools","title":"\u2692\ufe0f Set up common project tools","text":""},{"location":"SETUP/#pre-commit","title":"\u2693 Pre-commit","text":"<p>Pre-commit is used for ensuring code quality before it gets commited. When installing pre-commit hooks a check will be triggered before commiting, according to the rules specified in <code>.pre-commit-config.yaml</code>. If the check fails the commit won't be submitted.</p>"},{"location":"SETUP/#1-install-dependencies","title":"1. Install dependencies","text":"<pre><code>pip install -r requirements-global.txt\n</code></pre>"},{"location":"SETUP/#2-install-pre-commits-hooks","title":"2. Install pre-commits hooks","text":"<pre><code>pre-commit install\npre-commit install --hook-type commit-msg\n</code></pre>"},{"location":"SETUP/#3-force-pre-commit-run-on-all-files-optional","title":"3. Force pre-commit run on all files (optional)","text":"<p>If you want to test pre-commit before commiting to the repository run the following command:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"SETUP/#extensions-vscode","title":"\ud83e\udde9 Extensions (VSCODE)","text":"<ol> <li>Open the project Backend or Frontend (each one has its own recommended extensions)</li> <li>Go to extensions section on sidebar</li> <li>Select filter extensions</li> <li>Recommended</li> <li>Workspace recommended</li> <li>Install workspace recommended</li> </ol>"},{"location":"VISION/","title":"Project Vision: Spotify Electron","text":""},{"location":"VISION/#overview","title":"\ud83d\udc40 Overview","text":"<p>Spotify Electron is envisioned as a dynamic cross-platform music streaming desktop application, combining Electron-React frontend with Python-FastAPI-AWS backend. Its main objective is to emulate the functionalities of the original Spotify platform while incorporating new features such as song uploading.</p>"},{"location":"VISION/#goals","title":"\ud83c\udfaf Goals","text":"<ol> <li>Replicate Spotify Experience: Develop a music streaming service akin to Spotify, making use of Electron+React and Python+FastAPI technologies.</li> <li>Software Excellence: Implement best software practices to ensure scalability and facilitate quick feature iterations.</li> <li>Security and Quality: Prioritize security measures and code quality to ensure a safe user experience.</li> <li>Comprehensive Testing: Establish a comprehensive test suite covering both backend and frontend codebase.</li> <li>AWS Integration: Utilize several AWS services including Lambda, S3 and Cloudfront for efficient cloud operations.</li> <li>Effective Team Collaboration: Employ Github branches, pull requests, code reviews, and Trello Board for seamless team collaboration and task organization.</li> <li>CI/CD Automation: Implement CI/CD automation using Github Actions to streamline the development and deployment processes.</li> <li>Feature Expansion: Continuously introduce additional functionalities to enhance the original application user experience.</li> <li>Cross-Platform Compatibility: Ensure compatibility across multiple platforms with a single codebase.</li> <li>Interactive Landing Page: Develop a captivating landing page to engage users and showcase project goals, technologies and processes effectively.</li> <li>Containerization with Docker: Use Docker for simplified local development and streamlined production deployment processes.</li> </ol>"},{"location":"backend/Cloud/","title":"Cloud","text":""},{"location":"backend/Cloud/#wip","title":"WIP","text":""},{"location":"backend/Docker/","title":"Docker","text":"<p>Docker is used primarily in the project for:</p> <ul> <li>Easing development automating the set up process for infrastructure like databases and other utilities. The aim was to give a simple script so the developers can focus on getting the work done and to trying to deploy the project or messing installing and configuring different services.</li> <li>Easing the production development. When it comes to deploying the app into production is handy to have a script that allows the app to run in every system containerized with a single command. When deploying multiple instances of the backend the deployment time will be cut significantly.</li> </ul> <p>it's recommended to have Docker Desktop installed but only having docker will work.</p>"},{"location":"backend/Docker/#stacks","title":"Stacks","text":"<p>Currently the app has two stacks, one for development and one for deploying into production. All Docker related scripts and configuration is donde under the <code>docker/</code> folder.</p>"},{"location":"backend/Docker/#development","title":"Development","text":"<p>The stack contains the following:</p> <ul> <li>MongoDB Database</li> <li>Mongo Express administration dashboard<ul> <li>Connect http://localhost:8081/</li> <li>User: admin &amp; password: pass</li> </ul> </li> <li>Backend Server (Stop the container if you're deploying the backend server locally)</li> </ul> <p>This stack contains all you need to develop locally on your device. It's recommended to be used paired with the <code>BLOB ARCHITECTURE</code> architecture so you only need a mongoDB database to make the app work. See architectures for more info on what services has to be deployed depending on the architecture selected.</p> <p>Mongo Express administration dashboard is also shipped using this stack. This service wil let you administrate the items in the Database graphically. More info on the official image.</p> <p>Run this command to build and up the development containers:</p> <pre><code>./build_and_up_dev.sh\n</code></pre>"},{"location":"backend/Docker/#production","title":"Production","text":"<p>This stack only contains backend server and it's aimed to fast deployment into production of the service. it's recommended to use a remote database for production mode.</p> <p>Run the stack with:</p> <pre><code>./build_and_up_prod.sh\n</code></pre>"},{"location":"backend/Environment/","title":"Environment","text":"<p>In this document we will cover:</p> <ul> <li>How to use environment variables</li> <li>Environment variables usage</li> <li>Development environment variables</li> </ul>"},{"location":"backend/Environment/#how-to-use-environments","title":"\ud83d\udd90\ufe0f How to use environments","text":"<p>To use environments in the app, you will need to place a file named <code>.env</code> under the <code>Backend</code> folder. The file should contain key-value pairs, with each pair on a separate line and the key and value separated by an equals sign (<code>=</code>). For example:</p> <pre><code>KEY1=value1\n</code></pre> <p>Note that file has to be named <code>.env</code> not <code>.env.local</code> or similars, having a different name will not make its variables part of the environment variables recognized by the backend.</p>"},{"location":"backend/Environment/#environments-variables","title":"\ud83d\udcc4 Environments variables","text":"<p>In this section we will explain the meaning and the usage of the environment variables. Some of them are only necessary for one architecture, this means you can not declared them at all at the <code>.env</code> file.</p>"},{"location":"backend/Environment/#commons","title":"\u27a1\ufe0f Commons","text":"<ul> <li>SECRET_KEY_SIGN: 32 byte key(16 characters) for signing JWT Tokens that will authenticate the user. You can use <code>f24e2f3ac557d487b6d879fb2d86f2b2</code> as an example. This key will make sure the JWT Tokens are provided by our backend and not someone else's. For generating a new secret use <code>openssl rand -hex 16</code>.</li> <li>ENV_VALUE: determines the current environment of the app, it can be:<ul> <li><code>PROD</code>: production environment.</li> <li><code>DEV</code>: development environment. Enables hot reload.</li> </ul> </li> <li>ARCH: the song architecture selected, it can be one of the following architectures:<ul> <li><code>BLOB(Recommended for production and development)</code>: song architecture that stores songs in database and streams them using an endpoint.</li> <li><code>SERVERLESS</code>: (deprecated) song architecture using AWS Serverless Function with streaming.</li> </ul> </li> </ul>"},{"location":"backend/Environment/#no-streaming-with-songs-stored-in-database-blob","title":"\u27a1\ufe0f No streaming with songs stored in database (<code>BLOB</code>)","text":"<ul> <li>MONGO_URI: the database connection URI such as <code>mongodb://root:root@localhost:27017/</code>, this will connect backend into the selected database for storing all persistent including the song files.</li> </ul> <pre><code>MONGO_URI=mongodb://root:root@localhost:27017/\nSECRET_KEY_SIGN=f24e2f3ac557d487b6d879fb2d86f2b2\nENV_VALUE=DEV\nARCH=BLOB\n</code></pre>"},{"location":"backend/Environment/#streaming-using-aws-serverless-functions-serverlessdeprecated","title":"\u27a1\ufe0f Streaming using AWS Serverless Functions (<code>SERVERLESS</code>)(deprecated)","text":"<ul> <li>SERVERLESS_FUNCTION_URL: the url of the AWS serverless function (Lambda) that manages songs and comunicates with cloud storage.</li> <li>MONGO_URI: the database connection URI such as <code>mongodb://root:root@localhost:27017/</code>, this will connect backend into the selected database for storing all persistent data but not including song files.</li> </ul> <pre><code>MONGO_URI=mongodb://root:root@localhost:27017/\nSECRET_KEY_SIGN=f24e2f3ac557d487b6d879fb2d86f2b2\nSERVERLESS_FUNCTION_URL=https://lambda-url.us-east-1.on.aws/path/\nENV_VALUE=DEV\nARCH=SERVERLESS\n</code></pre>"},{"location":"backend/Environment/#development-environment","title":"\u2692\ufe0f DEVELOPMENT ENVIRONMENT","text":"<p>The following file can be used out of the box for development purpouse. It contains the following characteristics:</p> <ul> <li>Local MongoDB database. Use local MongoDB database, you can deploy one using our Docker stack as described here.</li> <li>Ready to use secret key</li> <li>BLOB architecture selected. This will only make necessary a MongoDB database because no cloud services are used in this architecture.</li> <li>DEV mode. It will enable hot reload for FastAPI.</li> </ul> <pre><code>MONGO_URI=mongodb://root:root@localhost:27017/\nSECRET_KEY_SIGN=f24e2f3ac557d487b6d879fb2d86f2b2\nENV_VALUE=DEV\nARCH=BLOB\n</code></pre>"},{"location":"backend/Environment/#production-environment","title":"\u2705 PRODUCTION ENVIRONMENT","text":"<p>The following file can be used out of the box for development purpouse. It contains the following characteristics:</p> <ul> <li>Remote MongoDB database. Use a remote MongoDB production ready database.</li> <li>Ready to use secret key. Generate it using <code>openssl rand -hex 16</code>.</li> <li>BLOB architecture selected. Use streaming architecture using BLOB files.</li> <li>PROD mode. It will disable hot reload for FastAPI.</li> </ul> <pre><code>MONGO_URI=mongodb://root:root@remote:27017/\nSECRET_KEY_SIGN=generated-key\nENV_VALUE=PROD\nARCH=BLOB\n</code></pre>"},{"location":"backend/Environment/#all-round-environment","title":"\ud83e\udea8 ALL ROUND ENVIRONMENT","text":"<p>You can also use the following <code>.env</code> file for changing between architectures as it contains all the variables needed. Just be sure to fill the the needed environments for the architecture seleted.</p> <pre><code>MONGO_URI=mongodb://root:root@localhost:27017/\nSECRET_KEY_SIGN=f24e2f3ac557d487b6d879fb2d86f2b2\nSERVERLESS_FUNCTION_URL=https://lambda-url.us-east-1.on.aws/path/\nENV_VALUE=DEV\nARCH=BLOB\n</code></pre>"},{"location":"backend/FAQ/","title":"FAQ","text":""},{"location":"backend/FAQ/#database-connection-failed-stopping-server","title":"\u25fe Database connection failed, stopping server","text":"<p>When launching the backend app, the following errors may appear 5 seconds after the application starts:</p> <ul> <li><code>SystemExit: Database connection failed, stopping server</code></li> <li><code>CRITICAL - Error establishing connection with database: Ping to the database failed</code></li> </ul> <p>Both errors indicate a failure to connect to the database. To diagnose the issue:</p> <ol> <li>Verify if your database is active by navigating to <code>localhost:27017</code> in your browser (the address might vary based on your database setup; <code>localhost:27017</code> is typical for development).</li> <li>If a blank page appears with the message: <code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code> then the database is running correctly.</li> <li>If nothing appears, revisit the Docker deployment steps to ensure everything was completed properly.</li> </ol> <p><code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code></p> <p>If nothing appears, check that the steps provided in Docker deployment were completed correctly.</p>"},{"location":"backend/FAQ/#docker-build-scripts-cannot-be-run","title":"\u25fe Docker build scripts cannot be run","text":"<p>If you cannot run Docker scripts or they fail while executing:</p> <ol> <li>Ensure you have a valid <code>.env</code> file by following the guidelines provided in the Environment guide.</li> <li><code>/bin/bash^M: bad interpreter: No such file or directory</code>. This indicates a problem with return carriages; Linux represents them differently. Try running <code>sed -i -e 's/\\r$//' script-name.sh</code> to convert Windows format to Linux.</li> </ol>"},{"location":"backend/FAQ/#_propertiesmanager-object-has-no-attribute-env_value","title":"\u25fe '_PropertiesManager' object has no attribute 'ENV_VALUE'","text":"<p>If you encounter an error similar to:</p> <p><code>AttributeError: '_PropertiesManager' object has no attribute 'ENV_VALUE'</code></p> <p>The environments are not being passed correctly to the app. Ensure you follow the Environment guide correctly and provide the required environments in a <code>.env</code> file under the Backend directory. If the error persists, restarting VS Code sometimes helps when environment variables are not loaded.</p>"},{"location":"backend/FAQ/#i-cant-authenticate-in-backend-swagger-docs","title":"\u25fe I can't authenticate in backend Swagger docs","text":"<p>There's a detailed guide about login and authentication here.</p>"},{"location":"backend/File-Structure/","title":"File Structure","text":"<p>In this document we will cover the file structure of the Backend for Spotify Electron.</p>"},{"location":"backend/File-Structure/#app","title":"\ud83c\ude34 App","text":"<ul> <li>\ud83d\udcc1 Common. Handles common logic for all app.<ul> <li>\ud83d\udcc4 PropertiesManager: loads enviroment variables and its associated logic and stores global app states.</li> <li>\ud83d\udcc4 PropertiesMessageManager: loads and store common response messages.</li> </ul> </li> <li>\ud83d\udcc1 Database. Handles database connection.</li> <li>\ud83d\udcc1 Exceptions. Custom base exceptions for our app.</li> <li>\ud83d\udcc1 Logging. Configure and provide logging formatting and handling for all app modules.</li> <li>\ud83d\udcc1 Middleware. Stores the middlewares used in the app and its logic.</li> <li>\ud83d\udcc1 Patterns. Desing patterns schemas.</li> <li>\ud83d\udcc1 Resources. Common configuration <code>.ini</code>.</li> <li>\ud83d\udcc1 Spotify_electron: main folder for our bussiness logic.<ul> <li>\ud83d\udcc1 Playlist. We will use playlist as an example but this apply to the whole domain model.<ul> <li>\ud83d\udcc4 Controller. Router used by FastAPI, it handles the incoming HTTP Requests. Upon recieving HTTP Request it delegates into the service layer.</li> <li>Service. Handles the bussiness logic for our domain model. It communicates with the repository layer for dasta persistence.</li> <li>\ud83d\udcc4 Repository. Manages the persistence layer and communicates directly with the database.</li> <li>\ud83d\udcc4Schema. Stores the entity related model such as classes or exceptions.</li> <li>\ud83d\udcc1 Providers. Services responsible for loading or supplying services depending and database collections  multiple conditions.</li> <li>\ud83d\udcc1 Validations. Common validations for repository and service layer. This include among others checks for database responses.</li> </ul> </li> <li>\ud83d\udcc1 Utils. Auxiliar functions for common operations such as date formatting, json validation...</li> </ul> </li> <li>\ud83d\udcc4<code>main</code>. Entrypoint of the app. Loads middlewares, routers and global configurations.</li> </ul>"},{"location":"backend/File-Structure/#docker","title":"\ud83d\udc33 Docker","text":"<p>Docker folder contains configuration files and scripts for deploying app containers using Docker. You can find more info here.</p>"},{"location":"backend/File-Structure/#tests","title":"\ud83e\uddea Tests","text":"<p>Here we can find stuff related to testing our backend:</p> <ul> <li>\ud83d\udcc1 <code>assets</code>. Folder that contains assets such as songs or files used in the tests.</li> <li>\ud83d\udcc4 Test files. Test files are grouped by entities such as songs, database, playlist etc. Named with <code>test__testname</code> convention.</li> <li>\ud83d\udcc1 <code>test_API</code>. Folder that stores shared logic between tests, such as HTTP requests.</li> <li>\ud83d\udcc4 <code>conftest.py</code>. File that exposes fixtures to all test files.</li> <li>\u2699 <code>pytest.ini</code>. Config file for provided enviroment values on text execution.</li> </ul>"},{"location":"backend/File-Structure/#root-folder","title":"\ud83c\udf33 Root Folder","text":"<p>In this folder we can find the Backend global configuration files. It includes:</p> <ul> <li>\u2699\ufe0f Ruff linter and formatter configuration file.</li> <li>\u2699\ufe0f Dependencies for base, dev and test mode. This follow the format <code>requirements-[type].txt</code>.</li> <li>\ud83c\udfd7\ufe0f Deploy configuration files such as Procfile and Dockerfile.</li> <li>\u2699\ufe0f Enviroment variables files. <code>.env.local</code> is used as an example, the app will only recognize <code>.env</code> files. More on enviroments.</li> </ul>"},{"location":"backend/File-Structure/#vscode","title":"\u2699\ufe0f .vscode","text":"<p>This folder is used to store the VSCODE related configurations. It contains:</p> <ul> <li>\u2699\ufe0f Recommended VSCODE extensions to use in the project</li> <li>\u2699\ufe0f Debug Scripts for launching the app and running the tests</li> <li>\u2699\ufe0f Settings for type checking python code and detecting tests files</li> </ul>"},{"location":"backend/Linting-%26-Formatting/","title":"Linting &amp; Formatting","text":""},{"location":"backend/Linting-%26-Formatting/#run-linting","title":"\u2705 Run linting","text":"<pre><code>python -m ruff check --fix\n</code></pre>"},{"location":"backend/Linting-%26-Formatting/#formatting","title":"\ud83c\udfa8 Formatting","text":"<pre><code>python -m ruff format\n</code></pre>"},{"location":"backend/SETUP/","title":"Set up and run BACKEND","text":"<p>In this section we will cover:</p> <ul> <li>How to set up the proyect</li> <li>Run the proyect and debug</li> <li>Deploy docker containers for development and production</li> </ul>"},{"location":"backend/SETUP/#set-up-the-proyect","title":"\ud83d\udee0 Set up the proyect","text":""},{"location":"backend/SETUP/#1-enter-backend-directory","title":"1. Enter backend directory","text":"<pre><code>cd Backend\n</code></pre>"},{"location":"backend/SETUP/#2-rename-envlocal-to-env-for-development-or-create-an-enviroment-file-in-root-path","title":"2. Rename <code>.env.local</code> to <code>.env</code> for development or create an enviroment file in root path","text":"<ul> <li>More on enviroments here.</li> <li>A development-ready <code>.env</code> file is also provided in the document.</li> </ul> <p>The enviroment variables are the following:</p> <pre><code>* MONGO_URI= uri for connecting into a MongoDB database (example: mongodb://root:root@localhost:27017/)\n* SECRET_KEY_SIGN= 32 byte key for signing tokens in backend\n* SERVERLESS_FUNCTION_URL= (optional) URL of Serverless/Lambda API for accesing AWS services and managing song (only needed in SERVERLESS architecture)\n* ARCH= song architecture (BLOB | SERVERLESS)\n* ENV_VALUE= prod or development (PROD | DEV)\n</code></pre>"},{"location":"backend/SETUP/#3-install-the-virtual-enviroment-and-dependencies","title":"3. Install the virtual enviroment and dependencies","text":"<p>\ud83e\ude9f Windows <pre><code>python -m venv venv;\nvenv/Scripts/activate;\npip install -r requirements.txt;\npip install -r requirements-dev.txt;\npip install -r requirements-test.txt;\n</code></pre></p> <p>\ud83d\udc27 Linux <pre><code>python3.11 -m venv venv &amp;&amp;\nsource venv/bin/activate &amp;&amp;\npip install -r requirements.txt &amp;&amp;\npip install -r requirements-dev.txt &amp;&amp;\npip install -r requirements-test.txt\n</code></pre> There's included a script <code>install-all-requirements.sh</code> that install all dependencies from a given directory in an already create virtual enviroment (Folder has to be named <code>venv</code>). Works both for Windows and Linux.</p>"},{"location":"backend/SETUP/#4-run-the-app","title":"4. Run the app:","text":""},{"location":"backend/SETUP/#standar","title":"Standar","text":"<pre><code>python -m app\n</code></pre>"},{"location":"backend/SETUP/#debug","title":"Debug","text":"<p>Launch the app in debug mode using <code>DEBUG Backend app</code> at VSCODE debug section. Breakpoints selected in code will be triggered. </p>"},{"location":"backend/SETUP/#5-the-app-will-be-deploy-at-http1270018000-api-docs-will-be-placed-at-http1270018000docs","title":"5. The app will be deploy at http://127.0.0.1:8000/. API docs will be placed at http://127.0.0.1:8000/docs","text":""},{"location":"backend/SETUP/#docker-deployment","title":"\ud83d\udc33 Docker deployment","text":"<p>In this section we will cover how to use Docker for local development or for production deployment. All the necessary tools for development such as a mongoDB database is provided with the dev enviroment script described below. For more info check the extended docker documentation.</p> <ol> <li>Go to docker folder</li> </ol> <pre><code>cd docker/\n</code></pre>"},{"location":"backend/SETUP/#development-enviroment","title":"Development Enviroment","text":"<p>For development it is recommended to deploy the dev enviroment containers that provide:</p> <ul> <li>Local MongoDB Database</li> <li>Mongo Express administration dashboard<ul> <li>Connect http://localhost:8081/</li> <li>Use user : admin and password : pass</li> </ul> </li> <li>Backend Server ( stop this container if backend server is running locally already )</li> </ul> <p>Run this command to build and up the development containers</p> <pre><code>./build_and_up_dev.sh\n</code></pre>"},{"location":"backend/SETUP/#production-enviroment","title":"Production Enviroment","text":"<p>In production it is recommended to connect to a remote database, the prod enviroment provide:</p> <ul> <li>Backend Server</li> </ul> <pre><code>./build_and_up_prod.sh\n</code></pre>"},{"location":"backend/Testing/","title":"Testing","text":"<p>In this section we will cover how to run tests and develop them. Make sure <code>Backend/</code> folder is the root directory when launching the tests. See more on testing principles here</p>"},{"location":"backend/Testing/#previous-configuration","title":"\u2699 Previous configuration","text":"<p>\u2757 Enviroment variables defined in <code>.env</code> file will affect the execution of tests. See enviroments for more info.</p> <p>Default configuration will only need a serverless function path if using <code>SERVERLESS</code> for executing tests. If another architecture is selected you can run tests out of the box locally.</p> <p>If the app is being executed for running test the file <code>pytest.ini</code> will override <code>ENV_VALUE</code> enviroment variable with <code>TEST</code> mode. This behaviour triggers the app to load an in-memory database instead of a real one. This can be side stepped by changing the <code>TEST</code> env value in <code>pytest.ini</code> to something like <code>PROD</code> or <code>DEV</code> if you need a real database for testing.</p>"},{"location":"backend/Testing/#serverlessdeprecated","title":"SERVERLESS(deprecated)","text":"<p>A valid path for a serverless function <code>SERVERLESS_FUNCTION_URL</code> is needed in enviroment variables for proper functioning.</p>"},{"location":"backend/Testing/#run-tests","title":"\ud83e\uddea Run tests","text":""},{"location":"backend/Testing/#standar-test-run","title":"Standar test run","text":"<pre><code>python -m pytest tests/\n</code></pre>"},{"location":"backend/Testing/#coverage-run","title":"Coverage run","text":"<p>Test run and generate code coverage in folder <code>htmlcov/index.html</code>.</p> <p><pre><code>python -m pytest tests/ --cov=app/ --cov-report=html\n</code></pre> If your browser is in a sandbox enviroment use <code>python -m http.server [port]</code> inside <code>htmlcov/</code> folder to serve an HTTP Server.</p>"},{"location":"backend/Testing/#debug-run-vscode","title":"Debug run VSCODE","text":"<p>In debug section launch <code>Run tests - Pytest</code>. This will run all the tests and will stop the execution on any provided breakpoints</p>"},{"location":"backend/Testing/#develop-tests","title":"\ud83d\udc77\u200d\u2642\ufe0f Develop tests","text":""},{"location":"frontend/FAQ/","title":"FAQ","text":""},{"location":"frontend/FAQ/#unresponsive-app-while-using-the-installed-client","title":"\u25fe Unresponsive app while using the installed client","text":"<p>If the app is unresponsive or cant process operations such as create user, login etc it may me possible that the server is not fully launch yet. Wait 30-45 seconds for the first request and then all the request will be done inmediatly.</p> <p>Our backend is hosted on an external third party server. The server goes to sleep when a fixed amout of time happens without any request. Sending a request to a slept server will trigger a cold start that can take up to 1 minute. This process is only being made when the server is going to sleep, apart from that the usage should be fast.</p> <p>See architecture structure for more info.</p>"},{"location":"frontend/File-Structure/","title":"File Structure","text":"<p>In this document we will cover the file structure of the Backend for Spotify Electron.</p>"},{"location":"frontend/File-Structure/#app","title":"\ud83c\ude34 App","text":"<ul> <li>\ud83d\udcc1 .erb. Webpack and app packaging logic.</li> <li>\ud83d\udcc1 Assets. Store frontend assets.</li> <li>\ud83d\udcc1 Release/build. Folder where the installer will be generated.</li> <li>\ud83d\udcc1 Src. Where main app is stored.<ul> <li>\ud83d\udcc1 __tests__. Store tests.</li> <li>\ud83d\udcc1 Components. Reusable components used across the app.</li> <li>\ud83d\udcc1 Global. Global files that stores configuration and common data across the app.<ul> <li>\ud83d\udcc4 global. Stores backend URL, current song architecture and other globals.</li> <li>\ud83d\udcc4 ReactComponent.tsx</li> </ul> </li> <li>\ud83d\udcc1 Main. Electron related files.</li> <li>\ud83d\udcc1 Pages. Main app pages.</li> <li>\ud83d\udcc1 Renderer. React app entrypoint.</li> <li>\ud83d\udcc1 Swagger. OpenAPI swagger schema.</li> <li>\ud83d\udcc1 Utils. Common utils.</li> </ul> </li> </ul>"},{"location":"frontend/File-Structure/#react-components","title":"React Components","text":"<p>Frontend interface uses React with TypeScript combined with css modules. The naming convention is the following:</p> <ul> <li>\ud83d\udcc1 ReactComponent<ul> <li>\ud83d\udcc4 ReactComponent.tsx</li> <li>\ud83d\udcc4 contextMenu.module.css</li> </ul> </li> </ul>"},{"location":"frontend/File-Structure/#vscode","title":"\u2699\ufe0f .vscode","text":"<p>This folder is used to store the VSCODE related configurations. It contains:</p> <pre><code>\u2699\ufe0f Recommended VSCODE extensions to use in the project\n\u2699\ufe0f Debug Scripts for launching the app and running the tests\n\u2699\ufe0f Settings for type checking python code and detecting tests files\n</code></pre>"},{"location":"frontend/Linting-%26-Formatting/","title":"Linting and formatting","text":""},{"location":"frontend/Linting-%26-Formatting/#linting","title":"\u2705 Linting","text":"<pre><code>npm run lint\n</code></pre>"},{"location":"frontend/Linting-%26-Formatting/#formatting","title":"\ud83c\udfa8 Formatting","text":""},{"location":"frontend/Linting-%26-Formatting/#run-the-style-check","title":"Run the style check","text":"<pre><code>npm run format:check\n</code></pre>"},{"location":"frontend/Linting-%26-Formatting/#run-the-style-formatter","title":"Run the style formatter","text":"<pre><code>npm run format:format\n</code></pre>"},{"location":"frontend/Package-app/","title":"\ud83d\udce6 Package app","text":"<p>In this section we will cover how to package app for production. After following the steps the generated installer will be placed at <code>Electron/release/build</code>.</p>"},{"location":"frontend/Package-app/#1-update-globalts-client-data","title":"1. Update <code>global.ts</code> client data","text":"<pre><code>export const songArchitecture: SongArchitecture = SongArchitecture.BLOB_ARCHITECTURE;\n</code></pre>"},{"location":"frontend/Package-app/#update-production-backend-url","title":"Update production backend url","text":"<p>\u2757 Set backend url path without trailing <code>/</code></p> <pre><code>export const backendBaseUrl: string = 'http://127.0.0.1:8000';\n</code></pre>"},{"location":"frontend/Package-app/#2-build-the-app","title":"2. Build the app","text":"<p>console <pre><code>npm run build\n</code></pre></p>"},{"location":"frontend/Package-app/#3-package-the-app","title":"3. Package the app","text":"<ul> <li>Packaging for MacOS can be only done from a native system</li> <li>From linux you can package the app for <code>AppImage</code> and <code>deb</code> format, and Windows if <code>wine</code> is installed</li> </ul>"},{"location":"frontend/Package-app/#native-host","title":"Native host","text":"<p>Packages app for native system format</p> <pre><code>npm run package\n</code></pre>"},{"location":"frontend/Package-app/#linux-host","title":"Linux host","text":""},{"location":"frontend/Package-app/#appimage","title":"AppImage","text":"<pre><code>npm run package:linux:appimage\n</code></pre> <p>An <code>.AppImage</code> file will be generated. If there's any error while trying to open the app try this:</p> <pre><code>sudo apt install libfuse2 &amp;&amp;\ncd release/build/ &amp;&amp;\nchmod 777 {generated-app-name}.AppImage &amp;&amp;\n./{generated-app-name}.AppImage --no-sandbox\n</code></pre>"},{"location":"frontend/Package-app/#windows","title":"Windows","text":"<p>An <code>.exe</code> will be generated</p> <pre><code>npm run package:win\n</code></pre>"},{"location":"frontend/Package-app/#deb-not-working","title":"Deb (not working)","text":"<pre><code>npm run package:linux:deb\n</code></pre>"},{"location":"frontend/SETUP/","title":"Setup and run FRONTEND","text":"<p>In this section we will cover:</p> <ul> <li>How to setup the proyect</li> <li>Run the proyect and debug</li> <li>Run tests</li> </ul>"},{"location":"frontend/SETUP/#setup-the-proyect","title":"\ud83d\udee0 Setup the proyect","text":""},{"location":"frontend/SETUP/#1-enter-frontend-folder","title":"1. Enter frontend folder","text":"<pre><code>cd Electron\n</code></pre>"},{"location":"frontend/SETUP/#2-install-dependencies","title":"2. Install dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"frontend/SETUP/#3-build-main-and-renderer-process","title":"3. Build main and renderer process","text":"<pre><code>npm run build\n</code></pre>"},{"location":"frontend/SETUP/#4-run-the-app","title":"4. Run the app","text":""},{"location":"frontend/SETUP/#standar","title":"Standar","text":"<pre><code>npm start\n</code></pre>"},{"location":"frontend/SETUP/#debug-chromium-based-browser-is-needed","title":"Debug (Chromium based browser is needed)","text":"<ol> <li>Launch VSCODE debug script <code>Electron: All</code></li> <li>Launch browser: <code>chromium --remote-debugging-port=9223 --user-data-dir=remote-debug-profile</code>. Replace <code>chromium</code> with the path of your browser executable</li> <li>Go to <code>localhost:1212</code> on the launched chromium based browser</li> <li>Refresh using F5 until the program stops at the selected breakpoint (this may require multiple refreshes).</li> </ol>"},{"location":"frontend/SETUP/#select-music-player-based-on-song-architecture-backend-optional","title":"\u25b6 Select Music Player based on Song Architecture backend (optional)","text":"<p>You can select a custom music player dependending if the song architecture is managed by regular or serverless streaming. By default <code>BLOB</code> architecture service is selected.</p>"},{"location":"frontend/SETUP/#1-enter-frontend-global-configuration-file","title":"1. Enter frontend global configuration file","text":"<pre><code>cd Electron/src/global/global.ts\n</code></pre>"},{"location":"frontend/SETUP/#2-select-the-music-player-streaming-architecture","title":"2. Select the music player streaming architecture","text":"<p>We have to selected if we want. Backend should also have the same architecture selected in order for songs to be played correctly.</p>"},{"location":"frontend/SETUP/#blob-production-and-development","title":"BLOB (PRODUCTION and DEVELOPMENT)","text":"<pre><code>export const songArchitecture: SongArchitecture = SongArchitecture.BLOB_ARCHITECTURE\n</code></pre>"},{"location":"frontend/SETUP/#serverless-deprecated","title":"Serverless (deprecated)","text":"<pre><code>export const songArchitecture: SongArchitecture = SongArchitecture.SERVERLESS_ARCHITECTURE\n</code></pre>"},{"location":"frontend/Testing/","title":"Testing","text":"<p>In this section we will cover how to run tests and develop them. See more on testing principles here.</p>"},{"location":"frontend/Testing/#run-tests","title":"\ud83e\uddea Run tests","text":""},{"location":"frontend/Testing/#standard-run","title":"Standard run","text":"<pre><code>npm run test\n</code></pre>"},{"location":"frontend/Testing/#coverage-run","title":"Coverage run","text":"<p>Run test and generate coverage, there will be a coverage folder under <code>Electron/</code>. Open <code>index.html</code> file to get an UI for visualizing coverage.</p> <pre><code>npm run test:coverage\n</code></pre>"},{"location":"frontend/Testing/#standalone-test-run","title":"Standalone test run","text":"<p>Go to the test file folder. (The cwd has to be the same as the test file)</p> <pre><code>npx jest filename.test.tsx\n</code></pre>"},{"location":"frontend/Testing/#debug-run-vscode","title":"Debug run VSCODE","text":"<p>In debug section launch <code>Debug Jest Tests</code>. This will run all the tests and will stop the execution on any provided breakpoints</p>"},{"location":"frontend/Testing/#develop-tests","title":"\ud83d\udc77\u200d\u2642\ufe0f Develop tests","text":""},{"location":"frontend/Testing/#test-interface-result","title":"Test interface result","text":"<p>For debugging the state of the interface we'll be using Jest Preview. This package will help us preview the state of the interface in certain point after the test finished running.</p> <p>First launch Jest preview server: <pre><code>npx jest-preview\n</code></pre></p> <p>An output with the port should be logged. Launch a browser instance and go to <code>localhost:3336</code> or the output port shown after running the command: <pre><code>Jest Preview Server listening on port 3336\n</code></pre></p> <p>Select the state of the code that you want to preview and add <code>debug()</code> statement: <pre><code>import { debug } from 'jest-preview'; // ---&gt; Import this line to the test file\n\ntest('renders the component and displays title and form', async () =&gt; {\n    await act(async () =&gt; {\n      render(\n        &lt;StartMenu\n          setIsLogged={setIsLoggedMock}\n          setIsSigningUp={setIsSigningUpMock}\n        /&gt;,\n      );\n    });\n\n    expect(screen.getByText('Spotify Electron')).toBeInTheDocument();\n    expect(\n      screen.getByText('Inicia sesi\u00f3n en Spotify Electron'),\n    ).toBeInTheDocument();\n    expect(screen.getByText('Nombre de usuario')).toBeInTheDocument();\n    expect(screen.getByText('Contrase\u00f1a')).toBeInTheDocument();\n\n    debug() // ---&gt; Add this statement, the browser will reflect the state of the UI in this point\n  });\n</code></pre> Go to the previously opened browser instance and check the state of the UI in the last <code>debug</code> statement.</p>"},{"location":"frontend/Testing/#mock-fetch","title":"Mock Fetch","text":"<p>Every request has to be mocked manually for the test to interactuate with real data. The following code snippet can be used as a mock template for fetch requests:</p> <pre><code>global.fetch = jest.fn(async (url: string) =&gt; {\n    if (url === `${Global.backendBaseUrl}/genres/`) {\n      return Promise.resolve({\n        json: () =&gt; JSON.stringify({ Rock: 'Rock', Pop: 'Pop' }),\n        status: 200,\n        ok: true,\n        headers: getMockHeaders(),\n      }).catch((error) =&gt; {\n        console.log(error);\n      });\n    }\n  }) as jest.Mock;\n</code></pre> <p>Note that there's two fields included in the response that can be useful/necessary in some situations:</p> <p>-<code>headers</code>: inserts <code>application/json</code> headers so if they're accessed the test run doesn't crash. -<code>ok</code>: if frontend is checking <code>response.ok</code>. (not used anymore)</p>"},{"location":"frontend/Testing/#global-set-up-for-tests","title":"Global set up for tests","text":"<p>If it\u00b4s necessary to run a script before any test execution you can specify it in <code>package.json</code>file under <code>jest</code> section:</p> <pre><code>\"setupFiles\": [\n      \"./.erb/scripts/check-build-exists.ts\",\"./src/utils/loadOpenApiTests.ts\"\n    ],\n</code></pre>"},{"location":"utils/Generate-Mock-Data/","title":"Generate Mock data","text":"<p>Somethis is useful to have fake/mock data to test the behaviour of the app under different loads of data. With this script you can generate small, medium or large amounts of data.</p>"},{"location":"utils/Generate-Mock-Data/#command-options","title":"Command options","text":"<ul> <li><code>help</code>: for seeing the script usage in the terminal</li> <li><code>small</code> | <code>medium</code> | <code>large</code>: the amount of data you want to generate</li> </ul>"},{"location":"utils/Generate-Mock-Data/#usage","title":"Usage","text":"<ol> <li>Go to <code>Backend/</code></li> <li>Install app dependencies with <code>pip install -r requirements.txt</code></li> <li>Run <code>python -m app.tools.generate_mock_data [(help) | (small|medium|large)]</code></li> </ol>"},{"location":"utils/Mkdocs/","title":"Mkdocs development &amp; usage","text":"<p>Project documentation will be deployed at <code>https://antoniomrtz.github.io/SpotifyElectron/</code>.</p> <p>MkDocs is a static site generator specifically designed for creating project documentation. Written in Python, it allows developers to build and deploy documentation websites with ease. It uses Markdown for writing content, supports custom themes, and integrates well with version control systems like Git. With its simple configuration and built-in support for search, MkDocs is a popular choice for creating professional, easy-to-maintain documentation sites. More info here</p>"},{"location":"utils/Mkdocs/#set-up","title":"\ud83d\udd28 Set up","text":"<ol> <li>Go to root folder of the project</li> <li>Create virtual enviroment and install dependencies</li> </ol> <p>\ud83e\ude9f Windows <pre><code>python -m venv venv;\nvenv/Scripts/activate;\npip install -r requirements-docs.txt\n</code></pre></p> <p>\ud83d\udc27 Linux <pre><code>python3.11 -m venv venv &amp;&amp;\nsource venv/bin/activate &amp;&amp;\npip install -r requirements-docs.txt\n</code></pre></p>"},{"location":"utils/Mkdocs/#deployment","title":"\ud83d\udfe9 Deployment","text":"<p>There's a pipeline that pushes the latest documentation files into the prodution website. For manual deployment run:</p> <pre><code>python -m mkdocs gh-deploy\n</code></pre>"},{"location":"utils/Mkdocs/#development","title":"\ud83d\udfe7 Development","text":"<ol> <li>Run the hot reload server <code>python -m mkdocs serve</code></li> <li>The website will be located at <code>http://127.0.0.1:8000/</code>. Every change you make in the documentation will be shown in the website.</li> </ol>"},{"location":"utils/OpenAPI/","title":"OpenAPI schema generation &amp; usage","text":"<p>The generated OpenAPI schema from Backend endpoints is used in Frontend for code auto-generation that enables for code reutilization and having an up-to-date status of the endpoints. OpenAPI schema is also used in a client that encapsulates all requests on frontend and makes use of the auto-generated code.</p> <p>OpenAPI is a standard for describing and documenting APIs. It uses schemas to define API endpoints, including data types, request formats, authentication methods, and more. This allows for automatic generation of interactive documentation, facilitates API testing with mock servers, and simplifies client code generation in multiple programming languages, promoting consistency and interoperability in API development. More info on OpenAPI docs</p>"},{"location":"utils/OpenAPI/#generate-openapi-schema-backend","title":"Generate OpenAPI Schema (Backend)","text":"<ol> <li>Go to <code>Backend/</code></li> <li>Install app dependencies with <code>pip install -r requirements.txt</code></li> <li>Run <code>python -m app.tools.generate_openapi</code></li> <li>OpenAPI schema can also be found in <code>Electron/src/swagger</code> folder,</li> </ol>"},{"location":"utils/OpenAPI/#generate-openapi-client-frontend","title":"Generate OpenAPI Client (Frontend)","text":"<ol> <li>Go to <code>Electron/</code></li> <li>Install app dependencies with <code>npm run build &amp;&amp; npm install</code></li> <li>Run <code>npm run generate-openapi-client</code> for generating code for backend requests based on its endpoints.</li> </ol>"},{"location":"utils/Release-Procedure/","title":"Release procedure","text":""},{"location":"utils/Release-Procedure/#1-update-release-version-info-on-codebase","title":"1. Update release version info on codebase","text":""},{"location":"utils/Release-Procedure/#frontend","title":"Frontend","text":"<p>Update <code>package.json</code> version in:</p> <ul> <li><code>Electron/package.json</code></li> <li><code>Electron/release/app/package.json</code></li> </ul> <pre><code>{\n  \"name\": \"spotify-electron\",\n  \"version\": \"1.0.0\",\n  ...\n}\n</code></pre>"},{"location":"utils/Release-Procedure/#backend","title":"Backend","text":"<p>Update FastAPI backend version on <code>Backend/app/common/app_schema.py</code></p> <pre><code>class AppInfo:\n    ...\n    VERSION = \"1.0.0\"\n    ...\n</code></pre>"},{"location":"utils/Release-Procedure/#2-generate-release-github","title":"2. Generate release Github","text":"<ul> <li>Generate release in Github releases</li> <li>Create tag</li> <li>Link code commit with release tag</li> </ul>"},{"location":"utils/Release-Procedure/#3-package-app","title":"3. Package app","text":"<ul> <li>Follow packaging guide using production backend URL and architecture.</li> <li>Upload exectuables to Github releases</li> </ul>"},{"location":"utils/Release-Procedure/#4-prepare-database","title":"4. Prepare database","text":"<ul> <li>Prepare data sets</li> <li>Delete non compatible data with new version in database</li> </ul>"},{"location":"utils/Release-Procedure/#5-deploy-backend-cloud-service","title":"5. Deploy backend cloud service","text":"<ul> <li>Select commit to deploy on cloud</li> <li>Check environment values are consistent with PRODUCTION ENVIRONMENT</li> </ul>"},{"location":"utils/Release-Procedure/#6-misc-updates","title":"6. Misc updates","text":"<ul> <li>Website</li> <li>Linkedin</li> <li>Portfolio</li> <li>Github readme and docs</li> </ul>"},{"location":"utils/Testing-Principles/","title":"\ud83e\uddea Testing principles","text":""},{"location":"utils/Testing-Principles/#recommendations","title":"Recommendations","text":"<ul> <li>Implement features in a way that they can be testable.</li> <li>Try to use as few mocks as possible, it will help us test the actual behaviour of all the app components.</li> </ul>"},{"location":"utils/Testing-Principles/#testing-principles_1","title":"Testing Principles","text":"<p>These are the principles that our tests have to follow:</p> <ul> <li>Automation: Tests must be able to be carried out without manual intervention.</li> <li>Repeatable: They must be repeatable any number of times, yielding the same results. This includes not persisting data that could influence other tests.</li> <li>Independence: Each test must be able to run independently, without depending on the results of other tests or functions.</li> <li>Executable in any environment: A test suite should be executable on any machine regardless of the environment.</li> <li>Coverage: Tests must cover the majority of the code.</li> </ul>"},{"location":"utils/Testing-Principles/#testing-methodology","title":"Testing Methodology","text":""},{"location":"utils/Testing-Principles/#setup","title":"\u00b7Setup\u00b7","text":"<ul> <li>Purpose: This phase involves setting up the necessary preconditions and state before executing the actual test.</li> <li>Actions:<ul> <li>Initialize any objects or resources required for the test.</li> <li>Set up test data or environment variables.</li> <li>Establish connections to databases or external services if needed.</li> </ul> </li> <li>Example: Before testing a function that calculates a result based on input data, you might initialize the function parameters and set up any mock objects or fixtures necessary for the test.</li> </ul>"},{"location":"utils/Testing-Principles/#execution","title":"\u00b7Execution\u00b7","text":"<ul> <li>Purpose: This phase involves the actual execution of the test case.</li> <li>Actions:<ul> <li>Invoke the code or function under test with the prepared input.</li> <li>Execute the specific functionality being tested.</li> </ul> </li> <li>Example: Execute the function with the initialized parameters and capture the output or behavior that the test is evaluating.</li> </ul>"},{"location":"utils/Testing-Principles/#assertion","title":"\u00b7Assertion\u00b7","text":"<ul> <li>Purpose: This phase verifies whether the behavior or output of the executed code matches the expected result.</li> <li>Actions:<ul> <li>Compare the actual output or behavior of the executed code against the expected outcome.</li> <li>Use assertions to check conditions that must be true for the test to pass.</li> <li>Raise failures or errors if the actual result does not match the expected result.</li> </ul> </li> <li>Example: Check that the result returned by the function matches the expected output based on the input parameters.</li> </ul>"},{"location":"utils/Testing-Principles/#teardown","title":"\u00b7Teardown\u00b7","text":"<ul> <li>Purpose: This phase cleans up resources or state after the test has been executed, ensuring a clean environment for subsequent tests.</li> <li>Actions:<ul> <li>Release any resources acquired during the setup phase.</li> <li>Reset or revert any changes made to the environment during the test execution.</li> <li>Close connections to databases or external services.</li> </ul> </li> <li>Example: Reset global variables, close open files, or clean up temporary data created during the test execution.</li> </ul>"}]}